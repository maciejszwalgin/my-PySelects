{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my-PySelects","text":"<p>Welcome to my personal collection of Python packages that I recommend, enjoy, and consider valuable to explore and use. This documentation serves as a curated guide to various Python packages, complete with recommendations, insights, and practical examples.</p>"},{"location":"#about-this-project","title":"About This Project","text":"<p>This documentation aims to provide:</p> <ul> <li>Curated lists of Python packages by category</li> <li>Personal recommendations and experiences</li> <li>Quick start guides and examples</li> <li>Best practices and tips</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Creative Commons Attribution 4.0 International License.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Feel free to suggest packages or improvements by opening an issue or pull request on the GitHub repository.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Full documentation of my-PySelects is available at https://maciejszwalgin.github.io/my-PySelects/.</p>"},{"location":"admin-and-frameworks/","title":"Admin and Web Frameworks","text":""},{"location":"admin-and-frameworks/#web-frameworks","title":"Web Frameworks","text":"<p>My recommended web frameworks:</p>"},{"location":"admin-and-frameworks/#fastapi","title":"FastAPI","text":"<p>Why I recommend it:</p> <ul> <li>Lightning-fast performance (on par with NodeJS and Go)</li> <li>Automatic API documentation with Swagger/OpenAPI</li> <li>Modern Python features with type hints</li> <li>Extremely intuitive and developer-friendly</li> <li>Perfect for microservices and async applications</li> </ul> <p>Key Features:</p> <ul> <li>\u26a1 High performance with Starlette and Pydantic</li> <li>\ud83d\udcdd Automatic API docs (Swagger UI &amp; ReDoc)</li> <li>\ud83d\udd0d Type hints and data validation</li> <li>\ud83d\udd04 Async support out of the box</li> <li>\ud83e\uddea Built-in testing tools</li> <li>\ud83d\udd10 Security and authentication included</li> <li>\ud83c\udfaf Dependency injection system</li> </ul> <p>Quick Example: <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return {\"name\": item.name, \"price\": item.price}\n</code></pre></p>"},{"location":"data-science/","title":"Data Science and Machine Learning","text":""},{"location":"data-science/#data-analysis","title":"Data Analysis","text":"<p>My recommended data analysis tools:</p>"},{"location":"data-science/#pandas","title":"Pandas","text":"<p>Why I recommend it:</p> <ul> <li>De facto standard for data manipulation</li> <li>Powerful data structures (DataFrame, Series)</li> <li>Extensive data analysis capabilities</li> <li>Great integration with other tools</li> <li>Huge community and ecosystem</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udcc8 DataFrame manipulation</li> <li>\ud83d\udcca Data analysis functions</li> <li>\ud83d\udcc2 File format support (CSV, Excel, SQL, etc.)</li> <li>\ud83d\udd0d Powerful indexing</li> <li>\ud83d\udd04 Data transformation</li> </ul> <p>Quick Example: <pre><code>import pandas as pd\n\n# Read CSV and perform analysis\ndf = pd.read_csv('data.csv')\nresult = df.groupby('category')['value'].mean()\n\n# Data manipulation\ndf['new_column'] = df['value'] * 2\nfiltered = df[df['value'] &gt; 100]\n</code></pre></p>"},{"location":"data-science/#pyspark","title":"PySpark","text":"<p>Why I recommend it:</p> <ul> <li>Big data processing at scale</li> <li>Distributed computing capabilities</li> <li>SQL-like interface</li> <li>Machine learning integration</li> <li>Part of Apache Spark ecosystem</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\ude80 Distributed processing</li> <li>\ud83d\udcc8 DataFrame API</li> <li>\ud83d\udd0d SQL queries</li> <li>\ud83e\udd16 ML pipelines</li> <li>\ud83d\udd04 Stream processing</li> </ul> <p>Quick Example: <pre><code>from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('example').getOrCreate()\n\n# Read and process data\ndf = spark.read.csv('large_data.csv', header=True)\nresult = df.groupBy('category').agg({'value': 'mean'})\n</code></pre></p>"},{"location":"data-science/#polars","title":"Polars","text":"<p>Why I recommend it:</p> <ul> <li>Lightning-fast DataFrame library</li> <li>Memory efficient</li> <li>Modern API design</li> <li>Great for large datasets</li> <li>Rust-powered performance</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\ude80 Extremely fast operations</li> <li>\ud83d\udcbe Memory efficient</li> <li>\ud83d\udd27 Easy to use API</li> <li>\ud83d\udd04 Lazy evaluation</li> <li>\ud83d\udcc8 Multi-threaded</li> </ul> <p>Quick Example: <pre><code>import polars as pl\n\n# Read and process data\ndf = pl.read_csv('data.csv')\nresult = df.groupby('category').agg([\n    pl.col('value').mean().alias('avg_value')\n])\n</code></pre></p>"},{"location":"data-science/#data-visualization","title":"Data Visualization","text":"<p>My recommended data visualization tools: </p>"},{"location":"data-science/#apache-superset","title":"Apache Superset","text":"<p>Apache Superset is a modern, enterprise-ready open source business intelligence web application.</p> <p>Why I recommend it:</p> <ul> <li>Modern, enterprise-ready</li> <li>Intuitive interface</li> <li>Wide range of visualizations</li> <li>SQL IDE</li> <li>Robust security</li> <li>Scalable</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udfa8 Beautiful interface</li> <li>\ud83d\udcda Dashboards and charts creation</li> <li>\ud83d\udcca Wide range of visualizations</li> <li>\ud83d\udd10 Users and Roles management</li> <li>\ud83d\ude80 Support for multiple data sources</li> <li>\ud83d\udcdc Open source business intelligence</li> </ul>"},{"location":"databases/","title":"Databases and Storage","text":""},{"location":"databases/#database-drivers","title":"Database Drivers","text":"<p>My recommended database drivers:</p>"},{"location":"databases/#postgresql-psycopg","title":"PostgreSQL =&gt; Psycopg","text":"<p>Why I recommend it:</p> <ul> <li>The most popular PostgreSQL adapter for Python</li> <li>Implements the Python DB-API specification</li> <li>High performance</li> <li>Thread safety</li> <li>Support for many PostgreSQL features</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udd17 Seamless integration with PostgreSQL</li> <li>\u26a1\ufe0f High performance</li> <li>\ud83d\udee1\ufe0f Thread safety</li> <li>\ud83d\udcf0 Support for COPY command</li> <li>\ud83d\udcc3 Support for LISTEN/NOTIFY</li> </ul> <p>Other Postgres Awesome Resources:</p> <ul> <li>Awesome Postgres</li> </ul>"},{"location":"development-tools/","title":"Development Tools","text":""},{"location":"development-tools/#code-analysis","title":"Code Analysis","text":"<p>My recommended code analysis tools:</p>"},{"location":"development-tools/#ruff-recommended","title":"\ud83c\udf1f Ruff - Recommended!","text":"<p>Why I recommend it:</p> <ul> <li>Extremely fast linter written in Rust</li> <li>Replaces multiple Python tools in one</li> <li>Automatic code fixes for many rules</li> <li>Highly configurable yet simple to use</li> <li>Regular updates and active development</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\ude80 10-100x faster than traditional linters</li> <li>\ud83d\udd04 Auto-fixes for many rules</li> <li>\ud83d\udd0d Comprehensive rule set</li> <li>\ud83d\udee0\ufe0f Configurable through pyproject.toml/ruff.toml</li> <li>\ud83d\udce6 Built-in formatter (replaces black)</li> </ul> <p>Note: Ruff can replace the following tools:</p> <ul> <li>flake8 (style guide enforcement)</li> <li>pylint (code analysis)</li> <li>isort (import sorting)</li> <li>black (formatting)</li> <li>pyupgrade (Python upgrade syntax)</li> <li>autoflake (unused imports removal)</li> </ul>"},{"location":"development-tools/#mypy","title":"Mypy","text":"<p>Why I recommend it:</p> <ul> <li>Static type checking for Python</li> <li>Catches type-related bugs early</li> <li>Improves code maintainability</li> <li>Great IDE integration</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udd0d Gradual typing support</li> <li>\u26a1 Incremental mode for faster checks</li> <li>\ud83c\udfaf Configurable strictness levels</li> <li>\ud83d\udd27 Extensive configuration options</li> </ul>"},{"location":"development-tools/#black","title":"Black","text":"<p>Why I recommend it:</p> <ul> <li>The uncompromising code formatter</li> <li>Removes style discussions from code review</li> <li>Widely adopted in Python community</li> <li>Deterministic output</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udfaf Zero configuration</li> <li>\u26a1 Fast formatting</li> <li>\ud83e\udd1d PEP 8 compliant</li> <li>\ud83d\udd27 Editor integration</li> </ul> <p>Note: While Black is still widely used, consider using Ruff's formatter (<code>ruff format</code>) as a modern, faster alternative that provides the same formatting style.</p> <p>Quick Example: <pre><code># Before Black:\nmy_list = [1,2,\n    3,4\n    ]\nresult = function_name(arg_one,arg_two,\n    kwarg_one=None,kwarg_two=None)\n\n# After Black:\nmy_list = [1, 2, 3, 4]\nresult = function_name(\n    arg_one,\n    arg_two,\n    kwarg_one=None,\n    kwarg_two=None,\n)\n</code></pre></p>"},{"location":"development-tools/#pre-commit","title":"Pre-commit","text":"<p>Why I recommend it:</p> <ul> <li>Automates code quality checks</li> <li>Ensures consistent code quality</li> <li>Prevents bad commits</li> <li>Language-agnostic</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udd04 Git hook management</li> <li>\ud83d\udce6 Large hook ecosystem</li> <li>\u26a1 Parallel execution</li> <li>\ud83d\udd12 Cached runs for performance</li> </ul> <p>Example .pre-commit-config.yaml: <pre><code>repos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.3.0\n  hooks:\n    - id: ruff\n      args: [--fix]\n    - id: ruff-format\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.8.0\n  hooks:\n    - id: mypy\n      additional_dependencies: [types-all]\n</code></pre></p>"},{"location":"development-tools/#package-management","title":"Package Management","text":"<p>My recommended package management tools:</p>"},{"location":"development-tools/#uv-recommended","title":"\ud83c\udf1f UV - Recommended!","text":"<p>Why I recommend it:</p> <ul> <li>Lightning-fast package installer written in Rust</li> <li>Drop-in replacement for pip/pip-tools</li> <li>Modern dependency resolver</li> <li>Seamless integration with pip ecosystem</li> <li>Active development by Astral (Ruff creators)</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\ude80 15-20x faster than pip</li> <li>\ud83d\udce6 Compatible with pip, pip-tools workflow</li> <li>\ud83d\udd12 Deterministic builds</li> <li>\ud83d\udd04 Smart caching</li> <li>\ud83d\udee0\ufe0f Built-in venv management</li> </ul> <p>Quick Example: <pre><code># Create and activate a virtual environment\nuv venv\nuv pip install -r requirements.txt\n\n# Or use it with pip-tools style workflow\nuv pip compile pyproject.toml -o requirements.txt\n</code></pre></p>"},{"location":"development-tools/#poetry","title":"Poetry","text":"<p>Why it's notable:</p> <ul> <li>Dependency management and packaging in one tool</li> <li>Modern project management</li> <li>Built-in virtual environment handling</li> <li>Great for publishing packages</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udce6 Dependency resolution</li> <li>\ud83d\udd12 Lock file for reproducible builds</li> <li>\ud83d\ude80 Publishing to PyPI</li> <li>\ud83d\udee0\ufe0f Project scaffolding</li> </ul>"},{"location":"development-tools/#build","title":"Build","text":"<p>Why it's notable:</p> <ul> <li>Standard-compliant package builder</li> <li>PEP 517 implementation</li> <li>Simple and focused tool</li> <li>Works with any build backend</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udfd7\ufe0f PEP 517 compliance</li> <li>\ud83d\udd27 Backend agnostic</li> <li>\ud83d\udce6 Isolated builds</li> <li>\ud83d\ude80 Simple interface</li> </ul>"},{"location":"development-tools/#wheel","title":"Wheel","text":"<p>Why it's notable:</p> <ul> <li>Built distribution format standard</li> <li>Faster installation than source distributions</li> <li>Cross-platform compatibility</li> <li>Industry standard</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udce6 Binary distribution format</li> <li>\ud83d\ude80 Fast installation</li> <li>\ud83d\udd04 Cross-platform support</li> <li>\ud83d\udd27 PEP 427 compliance</li> </ul> <p>Note: While all these tools are valuable, I particularly recommend UV for its exceptional speed and compatibility with existing workflows. It's a modern alternative that works seamlessly with traditional pip-based tooling while providing significant performance improvements.</p>"},{"location":"development-tools/#testing","title":"Testing","text":"<p>My recommended testing tools:</p>"},{"location":"development-tools/#pytest","title":"Pytest","text":"<p>Why I recommend it:</p> <ul> <li>Simple and readable test syntax</li> <li>Powerful fixture system</li> <li>Rich plugin ecosystem</li> <li>Great error reporting</li> <li>Industry standard for Python testing</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udf08 Beautiful test output</li> <li>\ud83d\udcda Rich assertion messages</li> <li>\ud83d\udd27 Powerful fixture system</li> <li>\ud83d\udd17 Extensive plugin ecosystem</li> <li>\ud83d\udcc8 Parameterized testing</li> </ul> <p>Quick Example: <pre><code>def test_addition():\n    assert 1 + 1 == 2\n\n@pytest.fixture\ndef user():\n    return {\"name\": \"John\", \"age\": 30}\n\ndef test_user(user):\n    assert user[\"age\"] == 30\n</code></pre></p>"},{"location":"development-tools/#tox","title":"Tox","text":"<p>Why I recommend it:</p> <ul> <li>Test automation and standardization</li> <li>Multi-environment testing</li> <li>CI/CD integration</li> <li>Virtual environment management</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udce6 Isolated build environments</li> <li>\ud83d\udd04 Multi-Python version testing</li> <li>\ud83d\udd27 Configuration via tox.ini</li> <li>\ud83d\udcbb CI/CD friendly</li> </ul>"},{"location":"development-tools/#coverage","title":"Coverage","text":"<p>Why I recommend it:</p> <ul> <li>Code coverage measurement</li> <li>Detailed coverage reports</li> <li>Integration with pytest</li> <li>Identifies untested code</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udcc8 Coverage measurement</li> <li>\ud83d\udcca HTML reports</li> <li>\ud83d\udd0d Branch coverage</li> <li>\ud83d\udee0\ufe0f Configuration options</li> </ul>"},{"location":"development-tools/#faker","title":"Faker","text":"<p>Why I recommend it:</p> <ul> <li>Generate realistic test data</li> <li>Multiple data providers</li> <li>Consistent fake data</li> <li>Great for testing and demos</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udcc3 Realistic data generation</li> <li>\ud83c\udf0e Multiple locales</li> <li>\ud83d\udd04 Reproducible results</li> <li>\ud83d\udcbb Easy to extend</li> </ul> <p>Quick Example: <pre><code>from faker import Faker\n\nfake = Faker()\n\ndef test_user_creation():\n    user = {\n        \"name\": fake.name(),\n        \"email\": fake.email(),\n        \"address\": fake.address()\n    }\n    assert \"@\" in user[\"email\"]\n</code></pre></p>"},{"location":"development-tools/#documentation","title":"Documentation","text":"<p>My recommended documentation tools:</p>"},{"location":"development-tools/#mkdocs-material","title":"MkDocs Material","text":"<p>Why I recommend it:</p> <ul> <li>Beautiful, modern documentation theme for MkDocs</li> <li>Feature-rich with search, dark mode, code highlighting</li> <li>Markdown-friendly with extensive formatting options</li> <li>Perfect for technical documentation</li> <li>Active development and great community</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udfa8 Multiple color schemes and dark mode</li> <li>\ud83d\udd0d Built-in search</li> <li>\ud83d\udcf1 Responsive design</li> <li>\ud83d\udcbb Code highlighting with copy button</li> <li>\ud83d\udd17 Auto-generated navigation</li> <li>\ud83d\udcca Diagrams support</li> <li>\ud83d\udd12 Versioning support</li> </ul>"},{"location":"development-tools/#project-scaffolding","title":"Project Scaffolding","text":"<p>My recommended project scaffolding tools:</p>"},{"location":"development-tools/#cookiecutter","title":"Cookiecutter","text":"<p>Why I recommend it:</p> <ul> <li>Project template engine</li> <li>Consistent project structures</li> <li>Large template ecosystem</li> <li>Language-agnostic</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udf73 Template-based scaffolding</li> <li>\ud83d\udcda Rich template context</li> <li>\ud83d\udd27 Customizable options</li> <li>\ud83d\udce6 Pre/post hooks</li> </ul> <p>Quick Example: <pre><code># Create a Python package project\ncookiecutter gh:audreyr/cookiecutter-pypackage\n\n# Create a FastAPI project\ncookiecutter gh:tiangolo/full-stack-fastapi-postgresql\n</code></pre></p>"},{"location":"devops/","title":"DevOps and Deployment","text":""},{"location":"devops/#task-queues","title":"Task Queues","text":"<p>My recommended task queues:</p>"},{"location":"devops/#luigi","title":"Luigi","text":"<p>Why I recommend it:</p> <ul> <li>Pipeline workflow management</li> <li>Dependency resolution</li> <li>Task scheduling and monitoring</li> <li>Built-in visualization</li> <li>Originally by Spotify</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udcc8 Dependency graphs</li> <li>\ud83d\udcc5 Task scheduling</li> <li>\ud83d\udcca Visualization UI</li> <li>\ud83d\udd04 Failure handling</li> <li>\ud83d\udcbe Storage integration</li> </ul> <p>Quick Example: <pre><code>import luigi\n\nclass FetchData(luigi.Task):\n    date = luigi.DateParameter()\n\n    def output(self):\n        return luigi.LocalTarget(f\"data_{self.date}.csv\")\n\n    def run(self):\n        # Fetch and save data\n        with self.output().open('w') as f:\n            f.write('data')\n\nclass ProcessData(luigi.Task):\n    date = luigi.DateParameter()\n\n    def requires(self):\n        return FetchData(date=self.date)\n\n    def output(self):\n        return luigi.LocalTarget(f\"processed_{self.date}.csv\")\n\n    def run(self):\n        # Process the input data\n        with self.input().open('r') as fin, \\\n             self.output().open('w') as fout:\n            fout.write(fin.read().upper())\n</code></pre></p>"},{"location":"devops/#environment-management","title":"Environment Management","text":"<p>My recommended environment management tools:</p>"},{"location":"devops/#pyenv","title":"pyenv","text":"<p>Why I recommend it:</p> <ul> <li>Python version management</li> <li>Multiple Python versions</li> <li>Project-specific Python versions</li> <li>No sudo required</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udd04 Version switching</li> <li>\ud83d\udcbb Local installation</li> <li>\ud83d\udd27 Shell integration</li> <li>\ud83d\udce6 Plugin system</li> </ul> <p>Quick Example: <pre><code># Install Python versions\npyenv install 3.12.0\npyenv install 3.11.0\n\n# Set global version\npyenv global 3.12.0\n\n# Set local version for project\ncd myproject\npyenv local 3.11.0\n</code></pre></p>"},{"location":"specialized/","title":"Specialized Domains","text":""},{"location":"utils/","title":"Utilities and Tools","text":""},{"location":"utils/#cli-development","title":"CLI Development","text":"<p>My recommended CLI development tools:</p>"},{"location":"utils/#click","title":"Click","text":"<p>Why I recommend it:</p> <ul> <li>Beautiful command line interfaces</li> <li>Intuitive and composable API</li> <li>Extensive documentation</li> <li>From the creators of Flask</li> <li>Great for both simple and complex CLIs</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udf08 Colorful output support</li> <li>\ud83d\udcdd Automatic help page generation</li> <li>\ud83d\udd17 Command nesting</li> <li>\ud83d\udd0d Argument validation</li> <li>\ud83d\udd27 Easy configuration</li> </ul> <p>Quick Example: <pre><code>import click\n\n@click.command()\n@click.option('--count', default=1, help='Number of greetings.')\n@click.option('--name', prompt='Your name', help='The person to greet.')\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo(f'Hello {name}!')\n\nif __name__ == '__main__':\n    hello()\n</code></pre></p>"},{"location":"utils/#rich","title":"Rich","text":"<p>Why I recommend it:</p> <ul> <li>Beautiful terminal formatting</li> <li>Extensive styling capabilities</li> <li>Great for data presentation</li> <li>Makes CLI apps look professional</li> <li>Easy to use yet powerful</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udf08 24-bit color and styles</li> <li>\ud83d\udcc8 Tables and progress bars</li> <li>\ud83d\udcbb Syntax highlighting</li> <li>\ud83c\udfac Live displays</li> <li>\ud83d\udcca Markdown/markup rendering</li> </ul> <p>Quick Example: <pre><code>from rich import print\nfrom rich.table import Table\n\ntable = Table(title=\"My Tools\")\ntable.add_column(\"Name\", style=\"cyan\")\ntable.add_column(\"Version\", style=\"magenta\")\ntable.add_row(\"Python\", \"3.12.0\")\ntable.add_row(\"Rich\", \"13.7.0\")\nprint(table)\n</code></pre></p>"},{"location":"utils/#tqdm","title":"TQDM","text":"<p>Why I recommend it:</p> <ul> <li>Smart progress bars</li> <li>Works with iterables</li> <li>Minimal code changes needed</li> <li>Great for long-running operations</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udcca Progress monitoring</li> <li>\u23f1\ufe0f ETA calculation</li> <li>\ud83d\udcc8 Automatic update rate</li> <li>\ud83d\udd04 Nested progress bars</li> </ul> <p>Quick Example: <pre><code>from tqdm import tqdm\nimport time\n\nfor i in tqdm(range(100)):\n    time.sleep(0.1)  # Simulate work\n</code></pre></p>"},{"location":"utils/#http-clients","title":"HTTP Clients","text":"<p>My recommended HTTP clients:</p>"},{"location":"utils/#requests","title":"Requests","text":"<p>Why I recommend it:</p> <ul> <li>Elegant and simple HTTP library</li> <li>Industry standard for HTTP in Python</li> <li>Human-friendly API</li> <li>Extensive features</li> </ul> <p>Key Features:</p> <ul> <li>\ud83c\udf08 Beautiful API design</li> <li>\ud83d\udd12 SSL/TLS verification</li> <li>\ud83c\udf0e Session support</li> <li>\ud83d\udcaa Strong authentication</li> </ul> <p>Quick Example: <pre><code>import requests\n\n# Simple GET request\nresponse = requests.get('https://api.github.com')\ndata = response.json()\n\n# POST with authentication\nresponse = requests.post(\n    'https://api.example.com/data',\n    json={'key': 'value'},\n    headers={'Authorization': 'Bearer token'}\n)\n</code></pre></p>"},{"location":"utils/#web-scraping","title":"Web Scraping","text":"<p>My recommended web scraping tools:</p>"},{"location":"utils/#beautifulsoup","title":"BeautifulSoup","text":"<p>Why I recommend it:</p> <ul> <li>Easy HTML/XML parsing</li> <li>Forgiving parser</li> <li>Intuitive API</li> <li>Great documentation</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\udd0d Easy navigation</li> <li>\ud83d\udee0\ufe0f Multiple parsers</li> <li>\ud83d\udd27 Search by tags/attributes</li> <li>\ud83d\udcda HTML cleanup</li> </ul> <p>Quick Example: <pre><code>from bs4 import BeautifulSoup\nimport requests\n\n# Parse HTML\nhtml = requests.get('https://example.com').text\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Find elements\ntitle = soup.find('h1').text\nlinks = [a['href'] for a in soup.find_all('a')]\n</code></pre></p>"},{"location":"utils/#scrapy","title":"Scrapy","text":"<p>Why I recommend it:</p> <ul> <li>Production-grade web scraping</li> <li>Asynchronous architecture</li> <li>Built-in pipeline system</li> <li>Extensive middleware support</li> </ul> <p>Key Features:</p> <ul> <li>\ud83d\ude80 High performance</li> <li>\ud83d\udd04 Concurrent requests</li> <li>\ud83d\udee0\ufe0f Built-in extensions</li> <li>\ud83d\udcbe Data export</li> </ul> <p>Quick Example: <pre><code>import scrapy\n\nclass BookSpider(scrapy.Spider):\n    name = 'bookspider'\n    start_urls = ['http://books.example.com']\n\n    def parse(self, response):\n        for book in response.css('.book-item'):\n            yield {\n                'title': book.css('.title::text').get(),\n                'price': book.css('.price::text').get()\n            }\n</code></pre></p>"}]}